<Window x:Class="MiniCalendar.Views.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MiniCalendar"
        xmlns:data="clr-namespace:MiniCalendar.Data"
        xmlns:conv="clr-namespace:MiniCalendar.Converters"
        mc:Ignorable="d"
        ResizeMode="CanResizeWithGrip" WindowStartupLocation="CenterScreen" WindowStyle="None"
        Title="MiniCalendar" Height="220" Width="700" MinHeight="150" MinWidth="300" AllowsTransparency="True" 
        MouseDown="Window_MouseDown" KeyDown="Window_KeyDown" FontSize="14" Foreground="{StaticResource WindowFontColor}"
        Background="{StaticResource BackgroundBrush}" Closing="Window_Closing">
    <Window.Resources>
        <conv:ItemsEqualWidthConverter x:Key="ItemsEqualWidthConverter" />
        <conv:DateToHebrewDayConverter x:Key="DateToHebrewDayConverter"/>
        <conv:IsTodayConverter x:Key="IsTodayConverter"/>
        <conv:TimeHasPassedConverter x:Key="TimeHasPassedConverter"/>
        <conv:AnyItemConverter x:Key="AnyItemConverter"/>
    </Window.Resources>
    <DockPanel>
        <!--Header-->
        <Border DockPanel.Dock="Top">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,5">
                <!--Refresh button-->
                <Button x:Name="RefreshData" Margin="5,0,0,0">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <Path Height="16" Width="18" Stretch="Fill" Margin="0,0,5,0" x:Name="RotatePath" Fill="{TemplateBinding Foreground}">
                                    <Path.Resources>
                                        <Storyboard x:Key="RotationStoryboard" Completed="RotationStoryboardCompleted">
                                            <DoubleAnimation
                                        Storyboard.Target="{Binding ElementName=RotatePath}"
                                        Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                        From="0" To="360" Duration="0:0:1">

                                                <DoubleAnimation.EasingFunction>
                                                    <CircleEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </Path.Resources>

                                    <Path.Data>
                                        <PathGeometry Figures="m 58.8 90.1 c 4.1 -1.4 5.9 -6.2 3.7 -9.9 v 0 c -1.6 -2.8 -5 -4 -8 -2.9 -4 1.4 -8.5 1.9 -13.1 1.4 C 28.2 77.1 17.7 66.3 16.4 53.1 14.3 35.1 29 20 46.8 21.2 c 14.3 0.9 26 12.5 26.9 26.8 0 0.7 0.1 1.3 0.1 2 h -6.5 c -2.8 0 -4.6 3.1 -3.1 5.5 l 13.3 21.3 c 1.4 2.3 4.7 2.3 6.1 0 L 96.9 55.5 C 98.4 53.1 96.7 50 93.8 50 h -6.5 c 0 0 0 0 0 0 C 87.3 26.5 68.3 7.5 44.8 7.6 20.7 7.6 1.3 27.9 2.6 52.3 3.8 74.1 21.7 91.6 43.4 92.4 48.8 92.6 54 91.8 58.8 90.1 Z" FillRule="NonZero"/>
                                    </Path.Data>

                                    <Path.Style>
                                        <Style TargetType="{x:Type Path}" BasedOn="{StaticResource {x:Type Path}}">
                                            <Setter Property="Path.RenderTransform">
                                                <Setter.Value>
                                                    <RotateTransform CenterX="8" CenterY="8"/>
                                                </Setter.Value>
                                            </Setter>

                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsRefreshing}" Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <StaticResource ResourceKey="RotationStoryboard"/>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Path.Style>
                                </Path>
                            </Border>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!--X button-->
                <Button Margin="5,0,5,0" Click="CloseButton_Click">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <Path Height="14" Width="14" VerticalAlignment="Center" Stretch="Fill" Margin="0,0,5,0" Fill="{TemplateBinding Foreground}">
                                    <Path.Data>
                                        <PathGeometry Figures="M 60.5 50 95.3 15.2 c 2.9 -2.9 2.9 -7.6 0 -10.5 -2.9 -2.9 -7.6 -2.9 -10.5 0 L 50 39.5 15.2 4.7 C 12.3 1.8 7.6 1.8 4.7 4.7 1.8 7.6 1.8 12.3 4.7 15.2 L 39.5 50 4.7 84.8 c -2.9 2.9 -2.9 7.6 0 10.5 1.4 1.4 3.3 2.2 5.2 2.2 1.9 0 3.8 -0.7 5.2 -2.2 L 50 60.5 84.8 95.3 c 1.4 1.4 3.3 2.2 5.2 2.2 1.9 0 3.8 -0.7 5.2 -2.2 2.9 -2.9 2.9 -7.6 0 -10.5 z" FillRule="NonZero"/>
                                    </Path.Data>
                                </Path>
                            </Border>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </StackPanel>
        </Border>
        <Border BorderThickness="2,0,2,0">
            <Grid Margin="0">
                <!--Reminder events overlay-->
                <Border Background="{StaticResource SemiTransparentBackgroundBrush}" Opacity="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="1">
                    <Border.Style>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="Visibility" Value="Hidden"/>

                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSnoozing}" Value="false"/>
                                        <Condition Binding="{Binding NextEvents, Converter={StaticResource AnyItemConverter}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>

                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>

                    <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <!--Reminder events-->
                        <ListBox ItemsSource="{Binding NextEvents}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.CanContentScroll="False" Background="Transparent" BorderThickness="0">
                            <ListBox.ItemTemplate>
                                <!--Event-->
                                <DataTemplate>
                                    <Button Click="Event_Click" x:Name="EventText">
                                        <Button.Template>
                                            <ControlTemplate>
                                                <TextBlock TextWrapping="Wrap" Margin="5">
                                            <Run Text="{Binding Start, StringFormat='{}{0:HH:mm}'}" FontWeight="Bold"/><!-- --><Run Text=" "/><!-- --><Run Text="{Binding Subject}" />
                                                </TextBlock>
                                            </ControlTemplate>
                                        </Button.Template>
                                    </Button>

                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsRightToLeft}" Value="true">
                                            <Setter TargetName="EventText" Property="FlowDirection" Value="RightToLeft"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>

                        <Button x:Name="Snooze" BorderThickness="1" BorderBrush="{StaticResource ForegroundBrush}" Margin="3,20,3,3" HorizontalAlignment="Center">
                            <TextBlock Margin="2">Snooze</TextBlock>
                        </Button>
                    </StackPanel>
                </Border>

                <!--Week-->
                <ItemsControl Name="Week" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel IsItemsHost="True" Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type data:Day}">
                            <Border BorderThickness="2,4,2,4" x:Name="itemBorder">
                                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" DragEnter="Day_DragEnter" DragLeave="Day_DragLeave" Drop="Day_Drop" AllowDrop="true">
                                    <!--Drop highlight-->
                                    <Border x:Name="DropHighlight" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" Visibility="Hidden" Panel.ZIndex="1">
                                        <Grid Margin="5">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="5"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>

                                            <Border x:Name="AppointmentHighlight" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{StaticResource SemiTransparentHighlightBrush}" DragEnter="DaySide_DragEnter" DragLeave="DaySide_DragLeave" Drop="AppointmentDaySide_Drop" AllowDrop="True">
                                                <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" Width="61.8" Height="61.9">
                                                    <Canvas.RenderTransform>
                                                        <TranslateTransform X="-1.3" Y="-0.98593108"/>
                                                    </Canvas.RenderTransform>
                                                    <Canvas>
                                                        <Path Fill="{StaticResource DimBrush}">
                                                            <Path.Data>
                                                                <PathGeometry Figures="m 44 39.4 2.1 -5.6 -1.7 0.5 c -0.2 0.1 -0.3 0.1 -0.5 0.2 0 0 0 0 -0.1 0 -0.7 -1.6 -1.6 -2.9 -2.7 -4 -2.8 -2.8 -6 -4.2 -9.5 -4.2 -1.2 0 -2.5 0.2 -3.8 0.5 -3.3 0.9 -6.1 2.9 -7.9 5.8 -1.8 2.8 -2.4 6.3 -1.8 9.7 0.5 3.1 2.2 5.9 4.7 8 2.4 2 5.5 3.1 8.6 3.1 0.6 0 1.1 0 1.7 -0.1 3.5 -0.4 6.4 -2 8.7 -4.7 0.9 -1.1 1.7 -2.3 2.1 -3.5 0.2 -0.4 0.1 -1.1 -0.3 -1.5 -0.3 -0.3 -0.7 -0.4 -1.1 -0.4 -0.1 0 -0.2 0 -0.4 0 -0.5 0.1 -0.8 0.6 -0.9 0.9 -1.7 3.9 -5.6 6.4 -9.9 6.4 -0.7 0 -1.4 -0.1 -2.1 -0.2 -2.8 -0.6 -5.3 -2.2 -6.9 -4.6 -1.6 -2.4 -2.1 -5.3 -1.5 -8.2 1 -4.6 5 -8.1 9.6 -8.5 0.3 0 0.6 0 0.9 0 3.4 0 6.2 1.4 8.5 4.1 0.5 0.6 1 1.3 1.3 2.1 L 39 36.1 Z" FillRule="NonZero"/>
                                                            </Path.Data>
                                                        </Path>
                                                        <Path Fill="{StaticResource DimBrush}">
                                                            <Path.Data>
                                                                <PathGeometry Figures="m 37.1 44.6 c 0 0.3 -0.1 0.6 -0.3 0.8 -0.2 0.2 -0.5 0.4 -0.9 0.4 0 0 0 0 0 0 -0.3 0 -0.6 -0.1 -0.8 -0.3 l -3 -2.5 c -0.2 0 -0.4 0.1 -0.6 0.1 -1.5 0 -2.6 -1.2 -2.6 -2.6 0 -0.9 0.4 -1.7 1.1 -2.2 l 0.3 -5.4 c 0 -0.6 0.5 -1.2 1.2 -1.2 0.6 0 1.2 0.5 1.2 1.2 l 0.3 5.4 c 0.7 0.5 1.1 1.3 1.1 2.2 0 0.1 0 0.3 0 0.4 l 2.6 2.9 c 0.2 0.2 0.4 0.5 0.4 0.8 z" FillRule="NonZero"/>
                                                            </Path.Data>
                                                        </Path>
                                                    </Canvas>
                                                    <Canvas>
                                                        <Canvas>
                                                            <Path Fill="{StaticResource DimBrush}">
                                                                <Path.Data>
                                                                    <PathGeometry Figures="m 40.1 10.4 c 0 -1.3 0 -2.5 0 -3.8 V 5.9 C 40 5.9 24 5.9 24 5.9 v 0.7 c 0 1.3 0 2.5 0 3.8 z" FillRule="NonZero"/>
                                                                </Path.Data>
                                                            </Path>
                                                            <Path Fill="{StaticResource DimBrush}">
                                                                <Path.Data>
                                                                    <PathGeometry Figures="M 56.9 5.9 C 55.7 5.7 54.5 5.8 53.3 5.8 c -0.7 0 -3.7 0 -4.7 0 0 -0.7 0 -1.4 0 -2.2 0 -1.8 -1.4 -3 -3 -2.5 -1 0.3 -1.6 1.1 -1.7 2 0 1.2 0 2.5 0 3.7 0 1.3 0 2.5 0 3.8 0 1.1 0.9 2 2 2.1 1.2 0.1 2.2 -0.5 2.6 -1.6 0.1 -0.3 0.1 -0.6 0.2 -1 h 6.7 c 1.8 0 2.8 1 2.8 2.8 v 4.6 H 5.9 v -4.6 c 0 -1.8 1 -2.8 2.8 -2.8 h 6.7 c 0 0.3 0.1 0.6 0.2 1 0.3 1.1 1.4 1.7 2.6 1.6 1 -0.1 1.9 -1 2 -2.1 0 -1.3 0 -2.5 0 -3.8 0 -1.2 0 -2.5 0 -3.7 0 -1 -0.7 -1.8 -1.7 -2 -1.6 -0.5 -3 0.7 -3 2.5 0 0.7 0 1.4 0 2.2 -1 0 -4 0 -4.7 0 C 9.6 5.8 8.4 5.7 7.2 5.9 3.6 6.5 1.3 9.4 1.3 13.1 v 42.4 c 0 4.3 3.1 7.4 7.4 7.4 7.8 0 15.7 0 23.5 0 v 0 c 7.8 0 15.6 0 23.5 0 4.3 0 7.3 -3.1 7.4 -7.4 V 13.2 C 62.8 9.5 60.5 6.6 56.9 5.9 Z m 1.2 49.6 c 0 1.8 -1 2.8 -2.8 2.8 H 32 v 0 H 8.7 c -1.8 0 -2.8 -1 -2.8 -2.8 V 21.6 h 52.2 z" FillRule="NonZero"/>
                                                                </Path.Data>
                                                            </Path>
                                                        </Canvas>
                                                    </Canvas>
                                                </Canvas>
                                            </Border>
                                            <Border x:Name="TaskHighlight" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{StaticResource SemiTransparentHighlightBrush}" DragEnter="DaySide_DragEnter" DragLeave="DaySide_DragLeave" Drop="TaskDaySide_Drop" AllowDrop="True">
                                                <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" Width="48" Height="62">
                                                    <Canvas.RenderTransform>
                                                        <TranslateTransform X="-8" Y="-0.9"/>
                                                    </Canvas.RenderTransform>
                                                    <Path Fill="{StaticResource DimBrush}">
                                                        <Path.Data>
                                                            <PathGeometry Figures="m 19.8 37.6 c -0.4 1 -0.1 2 0.6 2.8 2.3 2.3 3.8 3.9 6.2 6.2 0.3 0.3 0.7 0.5 1 0.6 1.1 0.3 2 0.1 2.8 -0.7 1.9 -1.9 4.1 -4 6.7 -6.6 2.1 -2.1 4.6 -4.4 6.6 -6.4 0.1 -0.1 0.1 -0.1 0.2 -0.2 0.8 -0.8 0.9 -2.2 0.3 -3.1 C 43.7 29.4 42.9 29 42 29 c -0.7 0 -1.4 0.3 -1.9 0.8 -1.7 1.7 -3.9 3.8 -5.5 5.4 l -0.3 0.3 c -1.7 1.7 -3.7 3.6 -5.4 5.3 L 28.4 41 24.1 36.6 c -0.5 -0.5 -1.2 -0.8 -1.9 -0.8 -0.1 0 -0.1 0 -0.2 0 -1.1 0.1 -1.9 0.8 -2.2 1.8 z" FillRule="NonZero"/>
                                                        </Path.Data>
                                                    </Path>
                                                    <Canvas>
                                                        <Path Fill="{StaticResource DimBrush}">
                                                            <Path.Data>
                                                                <PathGeometry Figures="M 43.8 10.1 C 43.7 9.8 43.5 9.5 43.4 9.2 43 8.6 42.3 8.1 41.6 7.9 41.3 7.8 41 7.8 40.8 7.8 H 38.9 V 7.5 c 0 -3.6 -3 -6.6 -6.7 -6.6 H 32 c -1.9 0 -3.5 0.7 -4.8 1.9 -1.2 1.2 -2 2.9 -2 4.7 v 0.3 h -1.9 c -0.3 0 -0.6 0 -0.8 0.1 -0.7 0.2 -1.4 0.6 -1.8 1.3 -0.2 0.3 -0.3 0.6 -0.4 0.9 -0.1 0.2 -0.1 0.4 -0.1 0.6 v 3.7 c 0 0.2 0.1 0.4 0.1 0.6 0.4 1.3 1.6 2.3 3 2.3 h 17.5 c 1.4 -0.1 2.6 -1 3 -2.3 0.1 -0.2 0.1 -0.4 0.1 -0.6 v -3.8 c 0 -0.1 -0.1 -0.3 -0.1 -0.5 z M 35.6 7.8 H 28.4 V 7.5 C 28.5 5.6 30 4.1 31.9 4.1 h 0.2 c 1.9 0 3.5 1.5 3.5 3.4 z" FillRule="NonZero"/>
                                                            </Path.Data>
                                                        </Path>
                                                    </Canvas>
                                                    <Path Fill="{StaticResource DimBrush}">
                                                        <Path.Data>
                                                            <PathGeometry Figures="m 56 47.1 v -0.6 c 0 -1.5 0 -3 0 -4.4 0 -3.5 0 -0.6 0 -4.1 V 36.2 C 56 30.8 56 25.3 56 19.8 56 15.7 54.3 12.7 50.9 10.9 49.7 10.3 48.4 10 46.7 10 h -0.9 v 4.3 H 46 c 0.6 0 1.1 0 1.5 0.1 2.3 0.1 4.2 2.1 4.3 4.3 0.1 2.2 0.1 4.4 0.1 6.4 v 17.4 c 0 5.2 0 4.9 0 10.1 0 1.2 0 2.4 -0.6 3.5 -1 1.8 -2.4 2.7 -4.3 2.7 H 32 16.9 C 15 58.8 13.6 57.9 12.6 56.1 12 55 12 53.8 12 52.6 12 47.4 12 47.7 12 42.5 V 25.1 c 0 -2 0 -4.3 0.1 -6.4 0.1 -2.2 2 -4.1 4.3 -4.3 0.4 0 0.9 0 1.5 -0.1 h 0.2 V 10 h -0.9 c -1.8 0 -3.1 0.3 -4.2 0.9 -3.3 1.9 -5 4.9 -5 8.9 0 5.5 0 11 0 16.4 V 38 c 0 3.5 0 0.6 0 4.1 0 1.5 0 3 0 4.4 v 0.6 c 0 4.2 0 3 0.1 7.2 0.1 2.3 1 4.5 2.7 6.1 1.7 1.7 3.9 2.6 6.2 2.6 v 0 c 4.9 0 9.7 0 14.6 0 h 0.4 0.5 c 4.9 0 9.7 0 14.6 0 v 0 c 2.3 0 4.5 -0.9 6.2 -2.6 1.7 -1.6 2.6 -3.8 2.7 -6.1 0.1 -4.2 0.1 -3 0 -7.2 z" FillRule="NonZero"/>
                                                        </Path.Data>
                                                    </Path>
                                                </Canvas>
                                            </Border>
                                        </Grid>
                                    </Border>

                                    <DockPanel LastChildFill="True">
                                        <DockPanel.Width>
                                            <MultiBinding Converter="{StaticResource ItemsEqualWidthConverter}">
                                                <Binding Path="ActualWidth" ElementName="Week"/>
                                                <Binding Path="Items.Count" ElementName="Week"/>
                                                <Binding Path="BorderThickness" ElementName="itemBorder"/>
                                            </MultiBinding>
                                        </DockPanel.Width>

                                        <!--Current day-->
                                        <Border DockPanel.Dock="Top" HorizontalAlignment="Stretch" Height="5" Background="{StaticResource HighlightBrush}">
                                            <Border.Style>
                                                <Style TargetType="{x:Type Border}">
                                                    <Setter Property="Visibility" Value="Collapsed"/>

                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Date, Converter={StaticResource IsTodayConverter}}" Value="True">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                        </Border>

                                        <!--Day header-->
                                        <DockPanel DockPanel.Dock="Top" HorizontalAlignment="Stretch" LastChildFill="True" Margin="5">
                                            <Label DockPanel.Dock="Left" Content="{Binding Date.DayOfWeek}" FontWeight="Bold"/>
                                            <Label DockPanel.Dock="Right" Content="{Binding Date, Converter={StaticResource DateToHebrewDayConverter}}" FontWeight="Bold"/>
                                            <TextBlock Text="{Binding Date, StringFormat='{}{0:dd/MM}'}" FontWeight="Bold" HorizontalAlignment="Center" TextTrimming="CharacterEllipsis" VerticalAlignment="Center">
                                                <TextBlock.Style>
                                                    <Style TargetType="{x:Type TextBlock}">
                                                        <Style.Triggers>
                                                            <Trigger Property="local:TextBlockService.IsTextTrimmed" Value="True">
                                                                <Setter Property="Visibility" Value="Hidden"/>
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBlock.Style>
                                            </TextBlock>
                                        </DockPanel>

                                        <!--Day events-->
                                        <ListBox ItemsSource="{Binding Events}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.CanContentScroll="False" Background="Transparent" BorderThickness="0">
                                            <ListBox.ItemTemplate>
                                                <!--Event-->
                                                <DataTemplate>
                                                    <Button Click="Event_Click" x:Name="EventText">
                                                        <Button.Template>
                                                            <ControlTemplate>
                                                                <TextBlock TextWrapping="Wrap" Margin="5">
                                            <Run Text="{Binding Start, StringFormat='{}{0:HH:mm}'}" FontWeight="Bold"/><!-- --><Run Text=" "/><!-- --><Run Text="{Binding Subject}" />
                                                                </TextBlock>
                                                            </ControlTemplate>
                                                        </Button.Template>
                                                    </Button>

                                                    <DataTemplate.Triggers>
                                                        <DataTrigger Binding="{Binding IsRightToLeft}" Value="true">
                                                            <Setter TargetName="EventText" Property="FlowDirection" Value="RightToLeft"/>
                                                        </DataTrigger>

                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding Type}" Value="{x:Static data:EventType.Appointment}"/>
                                                                <Condition Binding="{Binding Start, Converter={StaticResource TimeHasPassedConverter}}" Value="true"/>
                                                            </MultiDataTrigger.Conditions>

                                                            <MultiDataTrigger.Setters>
                                                                <Setter TargetName="EventText" Property="Foreground" Value="{StaticResource DimBrush}"/>
                                                            </MultiDataTrigger.Setters>
                                                        </MultiDataTrigger>
                                                    </DataTemplate.Triggers>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                        </ListBox>
                                    </DockPanel>
                                </Grid>
                            </Border>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>
        </Border>
    </DockPanel>
</Window>
