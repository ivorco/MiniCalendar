<Window x:Class="MiniCalendar.Views.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MiniCalendar"
        xmlns:data="clr-namespace:MiniCalendar.Data"
        xmlns:conv="clr-namespace:MiniCalendar.Converters" 
        xmlns:vm="clr-namespace:MiniCalendar.ViewModels"
        xmlns:cal="clr-namespace:Caliburn.Micro;assembly=Caliburn.Micro.Platform"
        mc:Ignorable="d"
        ResizeMode="CanResizeWithGrip" WindowStartupLocation="CenterScreen" WindowStyle="None"
        Title="MiniCalendar" Height="220" Width="700" MinHeight="150" MinWidth="300" AllowsTransparency="True" 
        MouseDown="Window_MouseDown" KeyDown="Window_KeyDown" FontSize="14" Foreground="{StaticResource WindowFontColor}"
        Background="{StaticResource BackgroundBrush}" Closing="Window_Closing"
        d:DataContext="{d:DesignInstance Type=vm:MainViewModel, IsDesignTimeCreatable=True}"
        cal:Bind.AtDesignTime="True">
    <Window.Resources>
        <conv:ItemsEqualWidthConverter x:Key="ItemsEqualWidthConverter" />
        <conv:DateToHebrewDayConverter x:Key="DateToHebrewDayConverter"/>
        <conv:IsTodayConverter x:Key="IsTodayConverter"/>
        <conv:TimeHasPassedConverter x:Key="TimeHasPassedConverter"/>
        <conv:AnyItemConverter x:Key="AnyItemConverter"/>
    </Window.Resources>
    <DockPanel>
        <!--Header-->
        <Border DockPanel.Dock="Top">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,5">
                <!--Refresh button-->
                <Button x:Name="RefreshData" Margin="5,0,0,0">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <Path Height="16" Width="18" Stretch="Fill" Margin="0,0,5,0" x:Name="RotatePath" Fill="{TemplateBinding Foreground}">
                                    <Path.Resources>
                                        <Storyboard x:Key="RotationStoryboard" Completed="RotationStoryboardCompleted">
                                            <DoubleAnimation
                                        Storyboard.Target="{Binding ElementName=RotatePath}"
                                        Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                        From="0" To="360" Duration="0:0:1">

                                                <DoubleAnimation.EasingFunction>
                                                    <CircleEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </Path.Resources>

                                    <Path.Data>
                                        <PathGeometry Figures="m 58.8 90.1 c 4.1 -1.4 5.9 -6.2 3.7 -9.9 v 0 c -1.6 -2.8 -5 -4 -8 -2.9 -4 1.4 -8.5 1.9 -13.1 1.4 C 28.2 77.1 17.7 66.3 16.4 53.1 14.3 35.1 29 20 46.8 21.2 c 14.3 0.9 26 12.5 26.9 26.8 0 0.7 0.1 1.3 0.1 2 h -6.5 c -2.8 0 -4.6 3.1 -3.1 5.5 l 13.3 21.3 c 1.4 2.3 4.7 2.3 6.1 0 L 96.9 55.5 C 98.4 53.1 96.7 50 93.8 50 h -6.5 c 0 0 0 0 0 0 C 87.3 26.5 68.3 7.5 44.8 7.6 20.7 7.6 1.3 27.9 2.6 52.3 3.8 74.1 21.7 91.6 43.4 92.4 48.8 92.6 54 91.8 58.8 90.1 Z" FillRule="NonZero"/>
                                    </Path.Data>

                                    <Path.Style>
                                        <Style TargetType="{x:Type Path}" BasedOn="{StaticResource {x:Type Path}}">
                                            <Setter Property="Path.RenderTransform">
                                                <Setter.Value>
                                                    <RotateTransform CenterX="8" CenterY="8"/>
                                                </Setter.Value>
                                            </Setter>

                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsRefreshing}" Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <StaticResource ResourceKey="RotationStoryboard"/>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Path.Style>
                                </Path>
                            </Border>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!--X button-->
                <Button Margin="5,0,5,0" Click="CloseButton_Click">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <Path Height="14" Width="14" VerticalAlignment="Center" Stretch="Fill" Margin="0,0,5,0" Fill="{TemplateBinding Foreground}">
                                    <Path.Data>
                                        <PathGeometry Figures="M 60.5 50 95.3 15.2 c 2.9 -2.9 2.9 -7.6 0 -10.5 -2.9 -2.9 -7.6 -2.9 -10.5 0 L 50 39.5 15.2 4.7 C 12.3 1.8 7.6 1.8 4.7 4.7 1.8 7.6 1.8 12.3 4.7 15.2 L 39.5 50 4.7 84.8 c -2.9 2.9 -2.9 7.6 0 10.5 1.4 1.4 3.3 2.2 5.2 2.2 1.9 0 3.8 -0.7 5.2 -2.2 L 50 60.5 84.8 95.3 c 1.4 1.4 3.3 2.2 5.2 2.2 1.9 0 3.8 -0.7 5.2 -2.2 2.9 -2.9 2.9 -7.6 0 -10.5 z" FillRule="NonZero"/>
                                    </Path.Data>
                                </Path>
                            </Border>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </StackPanel>
        </Border>
        <Border BorderThickness="2,0,2,0">
            <!--Important EMails-->
            <DockPanel LastChildFill="True">
                <Grid Margin="0" DockPanel.Dock="Right" Width="200">
                    <Border BorderThickness="2,4,2,4" x:Name="importantMailsBorder">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}" BasedOn="{StaticResource {x:Type Border}}">
                                <Setter Property="Visibility" Value="Hidden"/>

                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ImportantEMails, Converter={StaticResource AnyItemConverter}}" Value="true">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>

                        <ListBox ItemsSource="{Binding ImportantEMails}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.CanContentScroll="False" Background="Transparent" BorderThickness="0">
                            <ListBox.ItemTemplate>
                                <!--MailItem-->
                                <DataTemplate>
                                    <Button Click="Item_Click" x:Name="MailItemText">
                                        <Button.Template>
                                            <ControlTemplate>
                                                <TextBlock TextWrapping="Wrap" Margin="5">
                                            <Run Text="{Binding Start, StringFormat='{}{0:dd/MM/yy}'}" FontWeight="Bold"/><!-- --><Run Text=" "/><!-- --><Run Text="{Binding Subject}" />
                                                </TextBlock>
                                            </ControlTemplate>
                                        </Button.Template>
                                    </Button>

                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsRightToLeft}" Value="true">
                                            <Setter TargetName="MailItemText" Property="FlowDirection" Value="RightToLeft"/>
                                        </DataTrigger>

                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </Border>
                </Grid>

                <Grid Margin="0" DockPanel.Dock="Left">
                    <!--Reminder events overlay-->
                    <Border Background="{StaticResource SemiTransparentBackgroundBrush}" Opacity="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="1">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Visibility" Value="Hidden"/>

                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSnoozing}" Value="false"/>
                                            <Condition Binding="{Binding NextEvents, Converter={StaticResource AnyItemConverter}}" Value="true"/>
                                        </MultiDataTrigger.Conditions>

                                        <MultiDataTrigger.Setters>
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>

                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <!--Reminder events-->
                            <ListBox ItemsSource="{Binding NextEvents}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.CanContentScroll="False" Background="Transparent" BorderThickness="0">
                                <ListBox.ItemTemplate>
                                    <!--Event-->
                                    <DataTemplate>
                                        <Button Click="Item_Click" x:Name="EventText">
                                            <Button.Template>
                                                <ControlTemplate>
                                                    <TextBlock TextWrapping="Wrap" Margin="5">
                                            <Run Text="{Binding Start, StringFormat='{}{0:HH:mm}'}" FontWeight="Bold"/><!-- --><Run Text=" "/><!-- --><Run Text="{Binding Subject}" />
                                                    </TextBlock>
                                                </ControlTemplate>
                                            </Button.Template>
                                        </Button>

                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsRightToLeft}" Value="true">
                                                <Setter TargetName="EventText" Property="FlowDirection" Value="RightToLeft"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>

                            <Button x:Name="Snooze" BorderThickness="1" BorderBrush="{StaticResource ForegroundBrush}" Margin="3,20,3,3" HorizontalAlignment="Center">
                                <TextBlock Margin="2">Snooze</TextBlock>
                            </Button>
                        </StackPanel>
                    </Border>

                    <!--Week-->
                    <ItemsControl Name="Week" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ItemsSource="{Binding Week}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel IsItemsHost="True" Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type data:Day}">
                                <Border BorderThickness="2,4,2,4" x:Name="itemBorder">
                                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" DragEnter="Day_DragEnter" DragLeave="Day_DragLeave" Drop="Day_Drop" AllowDrop="true">
                                        <!--Drop highlight-->
                                        <Border x:Name="DropHighlight" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" Visibility="Hidden" Panel.ZIndex="1">
                                            <Grid Margin="5">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="5"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>

                                                <Border x:Name="AppointmentHighlight" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{StaticResource SemiTransparentHighlightBrush}" DragEnter="DaySide_DragEnter" DragLeave="DaySide_DragLeave" Drop="AppointmentDaySide_Drop" AllowDrop="True">
                                                    <ContentControl Width="61.8" Height="61.9" Content="{StaticResource AppointmentIcon}"/>
                                                </Border>
                                                <Border x:Name="TaskHighlight" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{StaticResource SemiTransparentHighlightBrush}" DragEnter="DaySide_DragEnter" DragLeave="DaySide_DragLeave" Drop="TaskDaySide_Drop" AllowDrop="True">
                                                    <ContentControl Width="48" Height="62" Content="{StaticResource TaskIcon}"/>
                                                </Border>
                                            </Grid>
                                        </Border>

                                        <DockPanel LastChildFill="True">
                                            <DockPanel.Width>
                                                <MultiBinding Converter="{StaticResource ItemsEqualWidthConverter}">
                                                    <Binding Path="ActualWidth" ElementName="Week"/>
                                                    <Binding Path="Items.Count" ElementName="Week"/>
                                                    <Binding Path="BorderThickness" ElementName="itemBorder"/>
                                                </MultiBinding>
                                            </DockPanel.Width>

                                            <!--Current day-->
                                            <Border DockPanel.Dock="Top" HorizontalAlignment="Stretch" Height="5" Background="{StaticResource HighlightBrush}">
                                                <Border.Style>
                                                    <Style TargetType="{x:Type Border}">
                                                        <Setter Property="Visibility" Value="Collapsed"/>

                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Date, Converter={StaticResource IsTodayConverter}}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                            </Border>

                                            <!--Day header-->
                                            <DockPanel DockPanel.Dock="Top" HorizontalAlignment="Stretch" LastChildFill="True" Margin="5">
                                                <Label DockPanel.Dock="Left" Content="{Binding Date.DayOfWeek}" FontWeight="Bold"/>
                                                <Label DockPanel.Dock="Right" Content="{Binding Date, Converter={StaticResource DateToHebrewDayConverter}}" FontWeight="Bold"/>
                                                <TextBlock Text="{Binding Date, StringFormat='{}{0:dd/MM}'}" FontWeight="Bold" HorizontalAlignment="Center" TextTrimming="CharacterEllipsis" VerticalAlignment="Center">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Style.Triggers>
                                                                <Trigger Property="local:TextBlockService.IsTextTrimmed" Value="True">
                                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                            </DockPanel>

                                            <!--Bottom Buttons-->
                                            <Border x:Name="BottomButtons" HorizontalAlignment="Stretch" DockPanel.Dock="Bottom" Visibility="Collapsed">
                                                <Grid Margin="5">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="5"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>

                                                    <Button Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{StaticResource SemiTransparentHighlightBrush}" Click="AppointmentButton_Click">
                                                        <ContentControl Height="16" Margin="2" Content="{StaticResource AppointmentIcon}"/>
                                                    </Button>
                                                    <Button Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{StaticResource SemiTransparentHighlightBrush}" Click="TaskButton_Click">
                                                        <ContentControl Height="16" Margin="2" Content="{StaticResource TaskIcon}"/>
                                                    </Button>
                                                </Grid>
                                            </Border>

                                            <!--Day events-->
                                            <ListBox ItemsSource="{Binding Events}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.CanContentScroll="False" Background="Transparent" BorderThickness="0">
                                                <ListBox.ItemTemplate>
                                                    <!--Event-->
                                                    <DataTemplate>
                                                        <Button Click="Item_Click" x:Name="EventText" Background="Transparent">
                                                            <Button.ContextMenu>
                                                                <ContextMenu>
                                                                    <MenuItem Header="Complete" Click="CompleteTaskMenuItem_Click">
                                                                        <MenuItem.Style>
                                                                            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                                                <Setter Property="Visibility" Value="Collapsed"/>

                                                                                <Style.Triggers>
                                                                                    <DataTrigger Binding="{Binding Type}" Value="{x:Static data:EventType.Task}">
                                                                                        <Setter Property="Visibility" Value="Visible"/>
                                                                                    </DataTrigger>
                                                                                </Style.Triggers>
                                                                            </Style>
                                                                        </MenuItem.Style>
                                                                    </MenuItem>
                                                                    <MenuItem Header="Delete" Click="DeleteItemMenuItem_Click"/>
                                                                </ContextMenu>
                                                            </Button.ContextMenu>

                                                            <Button.Template>
                                                                <ControlTemplate>
                                                                    <TextBlock TextWrapping="Wrap" Margin="5">
                                            <Run Text="{Binding Start, StringFormat='{}{0:HH:mm}'}" FontWeight="Bold"/><!-- --><Run Text=" "/><!-- --><Run Text="{Binding Subject}" />
                                                                    </TextBlock>
                                                                </ControlTemplate>
                                                            </Button.Template>
                                                        </Button>

                                                        <DataTemplate.Triggers>
                                                            <DataTrigger Binding="{Binding IsRightToLeft}" Value="true">
                                                                <Setter TargetName="EventText" Property="FlowDirection" Value="RightToLeft"/>
                                                            </DataTrigger>

                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding Type}" Value="{x:Static data:EventType.Appointment}"/>
                                                                    <Condition Binding="{Binding Start, Converter={StaticResource TimeHasPassedConverter}}" Value="true"/>
                                                                </MultiDataTrigger.Conditions>

                                                                <MultiDataTrigger.Setters>
                                                                    <Setter TargetName="EventText" Property="Foreground" Value="{StaticResource DimBrush}"/>
                                                                </MultiDataTrigger.Setters>
                                                            </MultiDataTrigger>
                                                        </DataTemplate.Triggers>
                                                    </DataTemplate>
                                                </ListBox.ItemTemplate>
                                            </ListBox>
                                        </DockPanel>
                                    </Grid>
                                </Border>

                                <DataTemplate.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                                            <Condition Binding="{Binding IsDayFuture}" Value="True"/>
                                        </MultiDataTrigger.Conditions>

                                        <Setter TargetName="BottomButtons" Property="Border.Visibility" Value="Visible" />
                                    </MultiDataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>
            </DockPanel>
        </Border>
    </DockPanel>
</Window>
