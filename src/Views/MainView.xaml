<Window x:Class="MiniCalendar.Views.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MiniCalendar"
        xmlns:data="clr-namespace:MiniCalendar.Data"
        xmlns:conv="clr-namespace:MiniCalendar.Converters"
        mc:Ignorable="d"
        ResizeMode="CanResizeWithGrip" WindowStartupLocation="CenterScreen" WindowStyle="None"
        Title="MiniCalendar" Height="220" Width="700" MinHeight="150" MinWidth="300" AllowsTransparency="True" 
        MouseDown="Window_MouseDown" KeyDown="Window_KeyDown" FontSize="14" Foreground="{StaticResource WindowFontColor}"
        Background="{StaticResource BackgroundBrush}" Closing="Window_Closing">
    <Window.Resources>
        <conv:ItemsEqualWidthConverter x:Key="ItemsEqualWidthConverter" />
        <conv:DateToHebrewDayConverter x:Key="DateToHebrewDayConverter"/>
        <conv:IsTodayConverter x:Key="IsTodayConverter"/>
        <conv:TimeHasPassedConverter x:Key="TimeHasPassedConverter"/>
        <conv:AnyItemConverter x:Key="AnyItemConverter"/>
    </Window.Resources>
    <DockPanel>
        <!--Header-->
        <Border DockPanel.Dock="Top">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                <!--Refresh button-->
                <Button x:Name="RefreshData">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <StackPanel Orientation="Horizontal">
                                <Label Foreground="{TemplateBinding Foreground}">Reload</Label>
                                <Path Height="16" Width="18" Stretch="Fill" Margin="0,0,5,0" x:Name="RotatePath" Fill="{TemplateBinding Foreground}">
                                    <Path.Resources>
                                        <Storyboard x:Key="RotationStoryboard" Completed="RotationStoryboardCompleted">
                                            <DoubleAnimation
                                        Storyboard.Target="{Binding ElementName=RotatePath}"
                                        Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                        From="0" To="360" Duration="0:0:1">

                                                <DoubleAnimation.EasingFunction>
                                                    <CircleEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </Path.Resources>

                                    <Path.Data>
                                        <PathGeometry Figures="m 58.8 90.1 c 4.1 -1.4 5.9 -6.2 3.7 -9.9 v 0 c -1.6 -2.8 -5 -4 -8 -2.9 -4 1.4 -8.5 1.9 -13.1 1.4 C 28.2 77.1 17.7 66.3 16.4 53.1 14.3 35.1 29 20 46.8 21.2 c 14.3 0.9 26 12.5 26.9 26.8 0 0.7 0.1 1.3 0.1 2 h -6.5 c -2.8 0 -4.6 3.1 -3.1 5.5 l 13.3 21.3 c 1.4 2.3 4.7 2.3 6.1 0 L 96.9 55.5 C 98.4 53.1 96.7 50 93.8 50 h -6.5 c 0 0 0 0 0 0 C 87.3 26.5 68.3 7.5 44.8 7.6 20.7 7.6 1.3 27.9 2.6 52.3 3.8 74.1 21.7 91.6 43.4 92.4 48.8 92.6 54 91.8 58.8 90.1 Z" FillRule="NonZero"/>
                                    </Path.Data>

                                    <Path.Style>
                                        <Style TargetType="{x:Type Path}" BasedOn="{StaticResource {x:Type Path}}">
                                            <Setter Property="Path.RenderTransform">
                                                <Setter.Value>
                                                    <RotateTransform CenterX="8" CenterY="8"/>
                                                </Setter.Value>
                                            </Setter>

                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsRefreshing}" Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <StaticResource ResourceKey="RotationStoryboard"/>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Path.Style>
                                </Path>
                            </StackPanel>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </StackPanel>
        </Border>
        <Border BorderThickness="2,0,2,0">
            <Grid Margin="0">
                <Border Background="{StaticResource HalfTransparentBackgroundBrush}" Opacity="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="1">
                    <Border.Style>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="Visibility" Value="Hidden"/>

                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSnoozing}" Value="false"/>
                                        <Condition Binding="{Binding NextEvents, Converter={StaticResource AnyItemConverter}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>

                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>

                    <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <!--Reminder events-->
                        <ListBox ItemsSource="{Binding NextEvents}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.CanContentScroll="False" Background="Transparent" BorderThickness="0">
                            <ListBox.ItemTemplate>
                                <!--Event-->
                                <DataTemplate>
                                    <Button Click="Event_Click" x:Name="EventText">
                                        <Button.Template>
                                            <ControlTemplate>
                                                <TextBlock TextWrapping="Wrap" Margin="5">
                                            <Run Text="{Binding Start, StringFormat='{}{0:HH:mm}'}" FontWeight="Bold"/><!-- --><Run Text=" "/><!-- --><Run Text="{Binding Subject}" />
                                                </TextBlock>
                                            </ControlTemplate>
                                        </Button.Template>
                                    </Button>

                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsRightToLeft}" Value="true">
                                            <Setter TargetName="EventText" Property="FlowDirection" Value="RightToLeft"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                        
                        <Button x:Name="Snooze" BorderThickness="1" BorderBrush="{StaticResource ForegroundBrush}" Margin="3,20,3,3" HorizontalAlignment="Center">
                            <TextBlock Margin="2">Snooze</TextBlock>
                        </Button>
                    </StackPanel>
                </Border>

                <!--Week-->
                <ItemsControl Name="Week" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel IsItemsHost="True" Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type data:Day}">
                            <Border BorderThickness="2,4,2,4" x:Name="itemBorder">
                                <DockPanel LastChildFill="True">
                                    <DockPanel.Width>
                                        <MultiBinding Converter="{StaticResource ItemsEqualWidthConverter}">
                                            <Binding Path="ActualWidth" ElementName="Week"/>
                                            <Binding Path="Items.Count" ElementName="Week"/>
                                            <Binding Path="BorderThickness" ElementName="itemBorder"/>
                                        </MultiBinding>
                                    </DockPanel.Width>

                                    <!--Current day-->
                                    <Border DockPanel.Dock="Top" HorizontalAlignment="Stretch" Height="5" Background="{StaticResource HighlightBrush}">
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="Visibility" Value="Collapsed"/>

                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Date, Converter={StaticResource IsTodayConverter}}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <!--Day header-->
                                    <DockPanel DockPanel.Dock="Top" HorizontalAlignment="Stretch" LastChildFill="True" Margin="5">
                                        <Label DockPanel.Dock="Left" Content="{Binding Date.DayOfWeek}" FontWeight="Bold"/>
                                        <Label DockPanel.Dock="Right" Content="{Binding Date, Converter={StaticResource DateToHebrewDayConverter}}" FontWeight="Bold"/>
                                        <TextBlock Text="{Binding Date, StringFormat='{}{0:dd/MM}'}" FontWeight="Bold" HorizontalAlignment="Center" TextTrimming="CharacterEllipsis" VerticalAlignment="Center">
                                            <TextBlock.Style>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Style.Triggers>
                                                        <Trigger Property="local:TextBlockService.IsTextTrimmed" Value="True">
                                                            <Setter Property="Visibility" Value="Hidden"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                    </DockPanel>

                                    <!--Day events-->
                                    <ListBox ItemsSource="{Binding Events}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.CanContentScroll="False" Background="Transparent" BorderThickness="0">
                                        <ListBox.ItemTemplate>
                                            <!--Event-->
                                            <DataTemplate>
                                                <Button Click="Event_Click" x:Name="EventText">
                                                    <Button.Template>
                                                        <ControlTemplate>
                                                            <TextBlock TextWrapping="Wrap" Margin="5">
                                            <Run Text="{Binding Start, StringFormat='{}{0:HH:mm}'}" FontWeight="Bold"/><!-- --><Run Text=" "/><!-- --><Run Text="{Binding Subject}" />
                                                            </TextBlock>
                                                        </ControlTemplate>
                                                    </Button.Template>
                                                </Button>

                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsRightToLeft}" Value="true">
                                                        <Setter TargetName="EventText" Property="FlowDirection" Value="RightToLeft"/>
                                                    </DataTrigger>

                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding Type}" Value="{x:Static data:EventType.Appointment}"/>
                                                            <Condition Binding="{Binding Start, Converter={StaticResource TimeHasPassedConverter}}" Value="true"/>
                                                        </MultiDataTrigger.Conditions>

                                                        <MultiDataTrigger.Setters>
                                                            <Setter TargetName="EventText" Property="Foreground" Value="{StaticResource DimBrush}"/>
                                                        </MultiDataTrigger.Setters>
                                                    </MultiDataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </DockPanel>
                            </Border>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>
        </Border>
    </DockPanel>
</Window>
